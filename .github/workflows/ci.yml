name: "nixos images"
on:
  pull_request:
  push:
    branches:
      - master
jobs:
  list-variants:
    runs-on: ubuntu-latest
    outputs:
      variants: ${{ steps.get-variants.outputs.variants }}

    steps:
    - uses: actions/checkout@v4
    - uses: cachix/install-nix-action@v31
      with:
        extra_nix_config: |
          experimental-features = flakes nix-command auto-allocate-uids configurable-impure-env
    - id: get-variants
      name: Get Image variants
      run: |
          variants="$(nix-instantiate --eval  --json --expr 'builtins.filter (n: !(builtins.elem n (import ./ignore.nix))) (builtins.attrNames (import ./. {}).nixos.images)')"
          echo "found $(echo $variants | jq 'length') image variants:"
          echo "variants=$(echo $variants | jq -cr '.')" | tee -a "$GITHUB_OUTPUT"

  build-images:
    name: Build images
    runs-on: ubuntu-24.04
    needs: list-variants
    strategy:
      fail-fast: false
      matrix:
        variants: ${{ fromJSON(needs.list-variants.outputs.variants) }}
    permissions:
      contents: write
      actions: write
    steps:
    - uses: actions/checkout@v4
    - uses: cachix/install-nix-action@v31
      with:
        extra_nix_config: |
          experimental-features = flakes nix-command auto-allocate-uids impure-env
    - uses: cachix/cachix-action@v16
      with:
        name: nixos-images-integration-tests
        authToken: '${{ secrets.CACHIX_AUTH_TOKEN }}'

    - id: build-images
      name: Build images
      env:
         variants: ${{ matrix.variants }}
      run: |
        # images built by repart seem to require unprivileged user namespaces, which are blocked on ubuntu by default
        sudo sysctl kernel.apparmor_restrict_unprivileged_userns || true
        sudo sysctl -w kernel.apparmor_restrict_unprivileged_userns=0 || true

        nix-build -A images.$variants
        filePath=$(realpath result)/$(nix-instantiate --eval  --json --expr "(import ./. {}).nixos.images.$variants.passthru.filePath" | jq -r)
        echo "filePath=$filePath" | tee -a "$GITHUB_OUTPUT"

    - id: test-images
      name: Test images
      env:
         variants: ${{ matrix.variants }}
      run: |
        export check_boot="$(nix-build -A check-boot)"
        $check_boot ${{matrix.variants}}

    - name: Upload
      uses: actions/upload-artifact@v4
      with:
        name: ${{ matrix.variants }}
        path: ${{ steps.build-images.outputs.filePath }}
        if-no-files-found: error
        compression-level: 0
        overwrite: true
